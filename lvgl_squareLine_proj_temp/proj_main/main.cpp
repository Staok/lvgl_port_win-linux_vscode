#include "main.h"

/* 当前 lvgl 版本 v8.3.11, lv_drivers 版本 v9.0.0-dev */

/* 编译 & 运行 方式：
    方式一：cmake 手动编译，见 根目录的 CMakeLists.txt 的注释 (see cmakelist.txt)
    方式二：VsCode 执行 task.json，即 "运行和调试窗口" 直接 点 "Run"，或者 按 F5 (in VsCode, press F5 to run)
        需要先在 launch.json 里的 miDebuggerPath 写上自己本地调试器路径
    方式三：VsCode IDE 里面下边栏，选择 kit 和 target，点击 build 和 run 运行 (in VsCode, or click "build" and "run" at the bottom the window)

    切换 cmake 编译指令 等情况，先手动清空 build 目录
*/

/* 一些使用注意：
    修改 配置文件 lv_conf.h、lv_drv_conf.h 等，要用对比工具辅助着来，引入新版 lvgl 库 的 lv_conf.h 时候，使用对比工具把新的内容引入到自己的 lv_conf.h 里面，这样不用覆盖后重新再改
    lv_tick_inc() 执行优先级应该高于 lv_timer_handler()，lv_timer_handler() 且也不能被中断打断（执行时先关闭中断再打开）
        "It's a better approach to simply set a flag or some value in the interrupt, and periodically check it in an LVGL timer"
    lvgl 的 api 是 线程不安全的，每次在 线程里面 调用 lvgl 的 api，需要用同一个互斥锁包起来
    一些控件如 tabView 没有动画过渡了，如有要，那么在 lv_tabView.c 里面，将 LV_ANIM_OFF 都替换成 LV_ANIM_ON 即可~~按需改吧
    USE_WIN32DRV 使用：refer to https://github.com/lvgl/lv_port_pc_visual_studio，但是很多东西在 mingw 下编译不过，弃之，需要是 VS(MSVC) 用的
    关闭 VsCode 每次保存 cmakelist 文件 就自动执行一次：设置里找到 Cmake: Configure On Edit，取消勾选此项
*/

/* 对源码修改之处 (modification of source code)
    sdl.c: sdl_event_handler(), eliminate the "exit(0);"
    win_drv.c:
        windrv_init()：
            // lv_task_create(msg_handler, 0, LV_TASK_PRIO_HIGHEST, NULL); this is old api not supported
            lv_timer_create(msg_handler, 10, NULL);
        WndProc()：
            eliminate SetTimer()、lv_tick_inc()，because it`s not working..
        do_register():
            correct to "lv_disp_draw_buf_init(&disp_buf_1 ..."
    lv_drivers/CMakeLists.txt:
        let "find_package" only in UNIX env to compile
        and link lvgl lib in win32 env
        comment "configure_file("${CMAKE_SOURCE_DIR}/lv-drivers.pc.in" ..." and all "install(...)"
*/

int main(int argc, char* argv[])
{
    (void)argc;
    (void)argv;

    int32_t ret = -1;

    /* test code */
    LV_LOG_USER("test");
    ret = test();
    if(ret < 0) { 
        LV_LOG_ERROR("test failure: %d", ret); return -10;
    }

    /* Initialize LVGL */
    lv_init();
    if(!lv_is_initialized()) {
        LV_LOG_ERROR("lv_init() failure"); return -1;
        return -1;
    }

    /* Initialize lv_i18n */
    ret = lv_i18n_init(lv_i18n_language_pack);
    if(ret < 0) { 
        LV_LOG_ERROR("lv_i18n_init() init failure"); return -1;
        return -1;
    }
    ret = lv_i18n_set_locale("en");
    if(ret < 0) { 
        LV_LOG_ERROR("lv_i18n_set_locale() failure"); return -1;
        return -1;
    }

    /* Initialize the HAL (display, input devices, tick) for LVGL */
    ret = lv_proj_hal_init();
    if(ret < 0) { 
        LV_LOG_ERROR("lvgl hal init failure: %d", ret); return -2;
    }

    /* proj init */
    LV_LOG_USER("proj init");
    ret = proj_init();
    if(ret < 0) { 
        LV_LOG_ERROR("lvgl hal init failure: %d", ret); return -3;
    }

    /* setup ui */
    LV_LOG_USER("start ui");
    // lv_demosAndExamples_show(); // run one lvgl demo or example
    ui_init(); // run the project generated by SquareLine of dir "squareLine_proj"

    for(;;)
    {
        // do not call lv_timer_handler_run_in_period() or lv_timer_periodic_handler() instead, it`s very consume cpu
        lv_timer_handler();
        usleep(5000);
        // Sleep(5);
        if(lvgl_exit_flag) break;
    }

    LV_LOG_USER("THE END");

    lv_proj_hal_deinit();

    #if LV_ENABLE_GC || !LV_MEM_CUSTOM
        lv_deinit();
    #endif

    return 0;
}

int32_t proj_init(void)
{
    std::cout << " - proj init begin" << std::endl;

    AppTemp::inst();
    BtnCbTemp::inst();

    std::cout << " - proj init end" << std::endl;
    return 0;
}
